@page "/products"
@using DataLogic.Repositories
@using DataLayer.Models
@inject ProductRepository _productRepository


<div class="card" style="padding-top:3rem; padding-left:4rem;">
    <h4><strong> Productos </strong></h4>

    <div class="card-body" style="padding-left: 0; padding-right: 2.5rem;">

        <RadzenDataGrid Data="@products.OrderBy(x=>x.Name)" TItem="Product" PagerPosition="PagerPosition.Bottom" AllowPaging="true" AllowSorting="true" PageSize="10"
                        SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selected>
            <Columns>

                <RadzenDataGridColumn TItem="Product" Property="Name" Title="Nombre" />
                <RadzenDataGridColumn TItem="Product" Property="Price" Title="Precio S/Impuesto" />
                <RadzenDataGridColumn TItem="Product" Property="GobPrice" Title="Precio Gubernamental" />
                <RadzenDataGridColumn TItem="Product" Property="AvailableQuantity" Title="Cantidad Disponible" />
                <RadzenDataGridColumn TItem="Product" Property="HasTaxes" Title="Impuestos">
                    <Template Context="data">
                        @if(@data.HasTaxes){
                        <span> 18% Itbis </span>
                        }else{
                           <span>Excento</span> 
                        }
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>

        @*<RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@paginationService.pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="@paginationService.count" PageSize="@paginationService.pageIndex" PageNumbersCount="10" PageChanged="@PageChanged" />*@


        <div class="options ">
            <div>
                <a @onclick="@OpenEditModal" style="margin-right:10px"><i class="fas fa-edit"></i> Editar</a>
                <a @onclick="@OpenDeleteModal" data-toggle="modal" data-target="#exampleModal"><i class="fas fa-trash-alt"></i> Eliminar</a>
            </div>
            <div>
                <a @onclick="@OpenRecieveModal"><i class="fas fa-plus-circle" style="color: #667EEA;"></i> Recibir Producto</a>
            </div>
            <div>
                <a @onclick="@OpenCreateModal"><i class="fas fa-plus-circle" style="color: #667EEA;"></i> Agregar Producto</a>
            </div>
            
        </div>



        @if (createBtn)
        {
            <div class="card" style="margin-top:5rem;">

                <div class="card-body ">
                    <CascadingValue Value="this">
                        <ProductsCreateUpdate update=false product="new Product()"></ProductsCreateUpdate>
                    </CascadingValue>
                </div>
            </div>

        }
        else if (editBtn)
        {
            <div class="card" style="margin-top:5rem;">
                <div class="card-body ">
                    @if (selected != null)
                    {
                        <CascadingValue Value="this">
                            <ProductsCreateUpdate update=true product="selected[0]"></ProductsCreateUpdate>
                        </CascadingValue>
                    }
                </div>
            </div>
        }
        @if (delBtn)
        {
            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">

                        <div class="modal-body text-center">
                            <i class="fas fa-exclamation fa-5x" style="color: #F8BB85"></i>
                            <h2> Eliminar</h2>
                            <h4>Esta seguro que desea proceder ?  </h4>
                        </div>
                        <div class=" text-center mb-5">
                            <button @onclick="@Delete" class="btn btn-primary" style="padding:0.5rem 2.5rem" data-dismiss="modal">Si</button>
                            <button class="btn btn-danger" data-dismiss="modal" style="padding:0.5rem 2.5rem">No</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (recBtn)
        { 
            <div class="mt-4">
               <EditForm Model="@receiver" OnValidSubmit="@Update">
                <DataAnnotationsValidator />

                    <div class="box-input">
                        <div class=" col-md-6 input-box mb-4">
                            <h6><strong>Cantidad a recibir</strong> </h6>
                            <InputNumber class="form-checkbox  user-inputs " @bind-Value="@receiver.Number" Min=0> </InputNumber>
                        </div>
                    </div>

                    <div class="opt-btn">
                        <button class="btn btn-lg text-white" style="background-color: #667EEA;" type="submit">
                            Recibir
                        </button>
                        <button @onclick="() => recBtn = false" class="btn btn-lg  text-white" style="background-color: #A8A9AA;" type="button">
                            Cancelar
                        </button>
                    </div>
                </EditForm>
            </div>
         
        }
    </div>
</div>

@code {
    public class Receiver
    {
        public int Number { get; set; }
    }

    private List<Product> products = new List<Product>();
    private IList<Product> selected;
    private bool createBtn;
    private bool editBtn;
    private bool recBtn;
    private bool delBtn;
    private Receiver receiver = new Receiver();

    void Update()
    {
        selected[0].AvailableQuantity += receiver.Number; 
        selected[0].Quantity += receiver.Number; 
        _productRepository.Update(selected[0]);
    }

    protected override void OnInitialized()
    {
        products = _productRepository.GetAll();
    }
    private void Delete()
    {
        _productRepository.Remove(selected[0]);
    }
    public void CloseCreateComponent()
    {
        this.createBtn = false;
        StateHasChanged();
    }

    public void CloseEditComponent()
    {
        this.editBtn = false;
        StateHasChanged();
    }
    public void OpenCreateModal()
    {
        this.editBtn = false;
        this.delBtn = false;
        this.recBtn = false;
        this.createBtn = true;

    }
    public void OpenRecieveModal()
    {
        this.editBtn = false;
        this.delBtn = false;
        this.createBtn = false;
        this.recBtn = true;

    }

    public void OpenEditModal()
    {
        if (selected != null)
        {

            this.createBtn = false;
            this.delBtn = false;
            this.recBtn = false;
            this.editBtn = true;
        }
        else
        {
        }
    }

    public void OpenDeleteModal()
    {
        if (selected != null)
        {
            this.createBtn = false;
            this.editBtn = false;
            this.recBtn = false;
            delBtn = true;
        }
        else
        {
        }
        StateHasChanged();
    }

    public void RefreshState()
    {
        products = _productRepository.GetAll();
        StateHasChanged();
    }
}
