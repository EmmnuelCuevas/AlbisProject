@using DataLayer.Models
@using DataLogic.Repositories
@using  DataLogic.Helpers
@inject ClientRepository _clientRepository
<style>
    .card-hd
    {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

</style>
<div class="">

    <div class="card-hd">
        <h4><i class="fas fa-plus-circle" style="color: #667EEA;"></i>  @addText.ToUpper()</h4>
    </div>

    <div class="dropdown-divider" style="padding-bottom:1.5rem; "></div>
        <EditForm Model="@client" OnValidSubmit="@Create">
        <DataAnnotationsValidator />
        <div class="box-input row">
            <div class="col-md-4 input-box mb-4">
                    <h6><strong>Nombre</strong> </h6>
                    <InputText class="form-control  user-inputs " @bind-Value="@client.Name"> </InputText>
                    <ValidationMessage For="() => client.Name" />
                </div>
                <div class=" col-md-4 input-box mb-4">
                    <h6><strong>RNC</strong> </h6>
                    <RadzenMask Mask="***-*****-*" class="form-control  user-inputs " CharacterPattern="[0-9]" Placeholder="000-00000-0" Name="RNC" @bind-Value="@client.Rnc" />
                    <ValidationMessage For="() => client.Rnc" />
                </div>
         
                <div class=" col-md-4 input-box mb-4">
                    <h6><strong>Numero Telefono</strong> </h6>
                    <RadzenMask Mask="***-***-****" CharacterPattern="[0-9]" class="form-control  user-inputs " Placeholder="(000)-000-0000"  @bind-Value="@client.PhoneNumber" />
                    <ValidationMessage For="() => client.PhoneNumber" />
                </div>
                <div class=" col-md-4 input-box mb-4">
                    <h6><strong>Direccion 1</strong> </h6>
                    <InputText class="form-control  user-inputs " @bind-Value="@client.Address"> </InputText>
                    <ValidationMessage For="() => client.Address" />
                </div>
                <div class=" col-md-4 input-box mb-4">
                    <h6><strong>Direccion 2</strong> </h6>
                    <InputText class="form-control  user-inputs " @bind-Value="@client.Address1"> </InputText>
                    <ValidationMessage For="() => client.Address1" />
                </div>
                <div class=" col-md-4 input-box mb-4">
                    <h6><strong>Cliente Gubernamental</strong> </h6>
                    <RadzenCheckBox class="form-control  user-inputs " @bind-Value="@client.IsGob"> </RadzenCheckBox>
                    <ValidationMessage For="() => client.IsGob" />
                </div>

        </div>

        <div class="opt-btn">
            <button class="btn btn-lg text-white" style="background-color: #667EEA;" type="submit">
                @addText
            </button>
            <button @onclick="CloseComponent" class="btn btn-lg  text-white" style="background-color: #A8A9AA;" type="button">
                Cancelar
            </button>
        </div>
        </EditForm>
</div>


@code {
    [CascadingParameter]
    public ClientIndex _parent { get;set; }

    [Parameter]
    public bool update { get; set; }

    [Parameter]
    public Client client { get; set; }
    private string addText = "Agregar";
    private string error;
    protected override void OnInitialized()
    {
        if (update)
            addText = "Actualizar";
    }

    private void Create()
    {
        try
        {
            Result result;

            if (!update)
            {
                result = _clientRepository.Create(client);
            }
            else
            {
                result = _clientRepository.Update(client);
            }

            if (result.Success)
            {
                // add notification
                _parent.RefreshState();
            }

        }
        catch (Exception err)
        {
            error = err.ToString();
        }
        StateHasChanged();

    }

    private void CloseComponent()
    {
        if (update)
            _parent.CloseEditComponent();
        else
            _parent.CloseCreateComponent();
    }
}
